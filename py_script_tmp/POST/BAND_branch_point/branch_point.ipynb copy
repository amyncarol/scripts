{
 "metadata": {
  "name": "",
  "signature": "sha256:9512acf31d6cefea4d1bc6d97d974d78f978d5bdb2e549c85e4bcf93ae87ab54"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import os\n",
      "import fileinput\n",
      "import sys\n",
      "import re\n",
      "import string\n",
      "import shutil\n",
      "import numpy as np\n",
      "from pymatgen.io.vaspio.vasp_output import Vasprun\n",
      "from pymatgen.io.vaspio.vasp_input import Poscar\n",
      "from pymatgen.core.periodic_table import Element\n",
      "from  pymatgen.io.vaspio_set import MPVaspInputSet\n",
      "from pymatgen.core.surface import Slab\n",
      "from pymatgen.core.surface import SlabGenerator\n",
      "from pymatgen.io.cifio import CifParser\n",
      "from pymatgen.core.surface import generate_all_slabs"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "v = Vasprun(\"/Users/yao/Desktop/mp-31487/vasprun.xml\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 86
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "fermi = v.efermi\n",
      "fermi\n",
      "v.structures"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 110,
       "text": [
        "[Structure Summary\n",
        " Lattice\n",
        "     abc : 6.5914039999999998 11.060237000000001 15.28047964952753\n",
        "  angles : 70.335475010079961 90.0 90.0\n",
        "  volume : 1049.016388372185\n",
        "       A : 6.5914039999999998 0.0 0.0\n",
        "       B : 0.0 11.060237000000001 0.0\n",
        "       C : 0.0 5.1420690000000002 14.389308\n",
        " PeriodicSite: Nb (3.2983, 5.9329, 10.0287) [0.5004, 0.2124, 0.6970]\n",
        " PeriodicSite: Nb (0.0026, 12.8405, 11.5553) [0.0004, 0.7876, 0.8030]\n",
        " PeriodicSite: Nb (3.2932, 10.2694, 4.3606) [0.4996, 0.7876, 0.3030]\n",
        " PeriodicSite: Nb (6.5889, 3.3619, 2.8340) [0.9996, 0.2124, 0.1970]\n",
        " PeriodicSite: I (1.6541, 14.5083, 9.6631) [0.2509, 0.9995, 0.6715]\n",
        " PeriodicSite: I (4.9498, 4.2650, 11.9209) [0.7509, 0.0005, 0.8285]\n",
        " PeriodicSite: I (4.9373, 1.6940, 4.7262) [0.7491, 0.0005, 0.3285]\n",
        " PeriodicSite: I (1.6416, 11.9373, 2.4684) [0.2491, 0.9995, 0.1715]\n",
        " PeriodicSite: I (1.7903, 6.4334, 12.2259) [0.2716, 0.1867, 0.8496]\n",
        " PeriodicSite: I (5.0860, 12.3399, 9.3581) [0.7716, 0.8133, 0.6504]\n",
        " PeriodicSite: I (4.8011, 9.7689, 2.1634) [0.7284, 0.8133, 0.1504]\n",
        " PeriodicSite: I (1.5054, 3.8624, 5.0312) [0.2284, 0.1867, 0.3496]\n",
        " PeriodicSite: I (1.6442, 7.2091, 8.3522) [0.2494, 0.3819, 0.5804]\n",
        " PeriodicSite: I (4.9399, 11.5642, 13.2317) [0.7494, 0.6181, 0.9196]\n",
        " PeriodicSite: I (4.9472, 8.9932, 6.0371) [0.7506, 0.6181, 0.4196]\n",
        " PeriodicSite: I (1.6515, 4.6381, 1.1576) [0.2506, 0.3819, 0.0804]\n",
        " PeriodicSite: I (1.6707, 10.7937, 11.0850) [0.2535, 0.6178, 0.7704]\n",
        " PeriodicSite: I (4.9664, 7.9796, 10.4990) [0.7535, 0.3822, 0.7296]\n",
        " PeriodicSite: I (4.9207, 5.4086, 3.3043) [0.7465, 0.3822, 0.2296]\n",
        " PeriodicSite: I (1.6250, 8.2227, 3.8903) [0.2465, 0.6178, 0.2704]\n",
        " PeriodicSite: I (1.5158, 13.8723, 13.5557) [0.2300, 0.8163, 0.9421]\n",
        " PeriodicSite: I (4.8115, 4.9010, 8.0282) [0.7300, 0.1837, 0.5579]\n",
        " PeriodicSite: I (5.0756, 2.3300, 0.8336) [0.7700, 0.1837, 0.0579]\n",
        " PeriodicSite: I (1.7799, 11.3013, 6.3611) [0.2700, 0.8163, 0.4421]]"
       ]
      }
     ],
     "prompt_number": 110
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "v.eigenvalue_band_properties[2]\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 134,
       "text": [
        "1.7093"
       ]
      }
     ],
     "prompt_number": 134
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "v.efermi"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 135,
       "text": [
        "1.72661196"
       ]
      }
     ],
     "prompt_number": 135
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "n_kpoints = len(v.actual_kpoints_weights)\n",
      "eigen = np.zeros([3,n_kpoints])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 100
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "v.efermi + v.eigenvalue_band_properties[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 133,
       "text": [
        "2.3249119599999997"
       ]
      }
     ],
     "prompt_number": 133
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "v.eigenvalue_band_properties[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 131,
       "text": [
        "0.5982999999999998"
       ]
      }
     ],
     "prompt_number": 131
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "v.get_poscar()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "AttributeError",
       "evalue": "'Vasprun' object has no attribute 'get_poscar'",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
        "\u001b[0;32m<ipython-input-115-4346c89dd13b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_poscar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[0;31mAttributeError\u001b[0m: 'Vasprun' object has no attribute 'get_poscar'"
       ]
      }
     ],
     "prompt_number": 115
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "for i in np.arange(0,n_kpoints):\n",
      "    eigen[0,i] = v.eigenvalues[(1,i)][90][0]\n",
      "    eigen[1,i] = v.eigenvalues[(1,i)][91][0]\n",
      "    eigen[2,i] = v.eigenvalues[(1,i)][92][0]\n",
      "weights = [0.5/2.0, 0.5/2.0, 1.0/2.0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 103
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "bp = 0\n",
      "for i in np.arange(0,3):\n",
      "    bp = bp + (v.actual_kpoints_weights*eigen[i,:]).sum()*weights[i]\n",
      "bp"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 104,
       "text": [
        "1.9618509128152501"
       ]
      }
     ],
     "prompt_number": 104
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "(v.actual_kpoints_weights*eigen[i,:]).sum()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 77,
       "text": [
        "0.43153672626400003"
       ]
      }
     ],
     "prompt_number": 77
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "for i in os.listdir('.'):\n",
      "    print i"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ".DS_Store\n",
        ".ipynb_checkpoints\n",
        "216_relax.ipynb\n",
        "analyse.py\n",
        "bandgap trend.ipynb\n",
        "bands_kpoints.ipynb\n",
        "branch_point.ipynb\n",
        "bsPlot.ipynb\n",
        "chg_profile.ipynb\n",
        "compress.py\n",
        "draw_colorful.ipynb\n",
        "draw_locpot.ipynb\n",
        "example.ipynb\n",
        "ez_setup.py\n",
        "figure1.ipynb\n",
        "image_charge.ipynb\n",
        "MAPI.ipynb\n",
        "mk_supercell.ipynb\n",
        "modify_structure.ipynb\n",
        "POSCAR_221.vasp\n",
        "POSCAR_222\n",
        "POSCAR_222.vasp\n",
        "POSCAR_U4.vasp\n",
        "proj_chg.ipynb\n",
        "rmWave.py\n",
        "rotate_structure.ipynb\n",
        "run all the folder in this dir.ipynb\n",
        "run.py\n",
        "slab.ipynb\n",
        "space_group.ipynb\n",
        "strain.ipynb\n",
        "strain_sno_113.ipynb\n",
        "strainCaccordingly.ipynb\n",
        "test.ipynb\n",
        "uncompress.py\n",
        "Untitled0.ipynb\n",
        "Untitled0.py\n",
        "Untitled1.ipynb\n",
        "uRamp.py\n",
        "wfn\n"
       ]
      }
     ],
     "prompt_number": 113
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}